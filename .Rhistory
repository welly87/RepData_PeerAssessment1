square(3)
ls(environment(cube))
ls(environment(square))
y <- 10
f <- function(x) {
y<-2
y^2 + g(x) }
f <- function(x) { x*y }
f(3)
g <- function(x) { x*y }
f(3)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
lapply
lapply()
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x
x$a
x[a]
x["a"]
x[["a"]]
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
x <- 1:4
lapply(x, runif)
lapply(x, runif, min = 0, max = 10)
x <- list(a = matrix(1:4, 2, 3), b = matrix(1:6, 3, 2))
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt(, 1))
lapply(x, function(elt) elt[, 1])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
sapply(x, mean)
y <- sapply(x, mean)
class(y)
y
y[a]
y["a"]
y$a
mean(y)
str(apply)
x <- matrix(rnorm(200), 20, 10)
x
apply(x, 2, mean)
apply(x, 1, sum)
rowSums
rowSums(x)
rowMeans(x)
colSums(x)
colMeans(x)
quantile
str(quantile)
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
apply(a, c(1, 2), mean)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
f
x
tapply(x, f, mean)
tapply(x, f, mean, simplify = F)
tapply(x, f, range)
str(split)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
f
split(x, f)
lapply(split(x, f), mean)
library(datasets)
head(airquality)
datasets
s <- split(airquality, airquality$Month)
s
lapply(s, function(s) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(s) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
x[, c("Ozone", "SOlar.R", "Wind")]
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(s) colMeans(x[, "Ozone", "Solar.R", "Wind"]))
sapply(s, function(x) colMeans(x[, "Ozone", "Solar.R", "Wind"]))
sapply(s, function(x) colMeans(x[, "Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, "Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, "Ozone", "Solar.R", "Wind")])
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "WInd")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = T))
lapply(s, function(s) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = T))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = T))
x <- rnorm(10)
f1 <- gl(2, 5)
f1
f2 <- gl(5, 2)
f2
f1
f2
interaction(f1, f2)
str(split(x, list(f1, f2)))
x
iris
data(iris)
?iris
View(iris)
iris
head(iris)
s <- iris
s
data
data
iris
s <- split(iris, iris$Species)
s
head(s)
s$Virginica
s
s$virginica
colmeans(s$virginica)
colMeans(s$virginica)
s$virginica
colMeans(s$virginica$Sepal.Length)
colMeans(s$virginica)
colMeans(s$virginica["Sepal.Length"])
apply(iris[, 1:4], 2, mean)
data(mtcars)
mtcars
View(iris)
View(mtcars)
split
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
mtcars$mpg
mtcars$cyl
?mtcars
split(mtcars$hp)
mtcars$hp
split(mtcars$hp, mtcars$cyl)
sapply(split(mtcars$hp, mtcars$cyl), mean)
res <- sapply(split(mtcars$hp, mtcars$cyl), mean)
res[4]
res[1]
res[1] - res[3]
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(c(1, 2, 3, 4, 5))
x <- makeVector(c(1, 2, 3, 4, 5))
x$get()
x$getmean()
c=rbind(c(1, -1/4), c(-1/4, 1))
c
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
x <- makeCacheMatrix(c)
x
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
str(mean)
str(makeCacheMatrix)
c(1, 2, 3)
str(c)
str(str)
str(lm)
lm
str(lm)
str(ls)
x <- rnorm(100, 2, 4)
x
summary(x)
str(x)
f <- gl(40, 10)
f
str(f)
summary(f)
library(datasets)
head(airquality)
str(airquality)
airquality$oZONE
airquality$Ozone
m <- matrix(rnorm(100), 10, 10)
str(m)
s <- split(airquality, airquality$Month)
s
str(s)
s$1
s[1]
summary(cars)
```
install.packages("knitr")
You can also embed plots, for example:
setwd("~/Documents/GitHub/RepData_PeerAssessment1")
result <- ddply(activities, .(date), summarize, sum=sum(steps, na.rm=F))
hist(result$sum, col="red", main = "Histogram of Step per Day", xlab = "steps", breaks = 61)
activities <- read.csv("activity.csv")
install.packages("plyr")
library("plyr")
result <- ddply(activities, .(date), summarize, sum=sum(steps, na.rm=F))
hist(result$sum, col="red", main = "Histogram of Step per Day", xlab = "steps", breaks = 61)
MeInt <- tapply(activities$steps, activities$interval, mean, na.rm = T)
head(MeInt)
names(MeInt)
meanInterval
meanInterval <- tapply(activities$steps, activities$interval, mean, na.rm = T)
meanInterval
head(meanInterval)
names(meanInterval)
meanInterval == max(meanInterval)
meanInterval <- tapply(activities$steps, activities$interval, mean, na.rm = T)
interval <- as.numeric(names(meanInterval))
plot(interval, meanInterval, type = "l", xlab = "Interval", ylab = "Steps")
maxInterval <- as.numeric(names(meanInterval)[meanInterval == max(meanInterval)])
abline(v = maxInterval, col = "red")
head(result)
head(activities)
sum(is.na(activities$steps))
meanInterval
head(meanInterval)
dim(activities)
activities$steps
activitiesFill <- activities
for (i in 1:dim(activities)[1]) {
if (is.na(activities$steps[i])) {
activitiesFill[i] <- as.numeric(meanInterval[names(meanInterval) == activitiesFill$interval[i]])
}
}
sum(is.na(activities$steps))
activitiesFill <- activities
for (i in 1:dim(activitiesFill)[1]) {
if (is.na(activitiesFill$steps[i])) {
activitiesFill[i] <- as.numeric(meanInterval[names(meanInterval) == activitiesFill$interval[i]])
}
}
sum(is.na(activitiesFill$steps))
newResult <- ddply(activitiesFill, .(date), summarize, sum=sum(steps, na.rm=F))
hist(result$sum, col="red", main = "Histogram of Step per Day", xlab = "steps", breaks = 61)
mean(result$sum, na.rm=T)
median(result$sum, na.rm=T)
mean(activitiesFill$sum, na.rm=T)
median(activitiesFill$sum, na.rm=T)
mean(newResult$sum, na.rm=T)
median(newResult$sum, na.rm=T)
mean(result$sum, na.rm=T)
median(result$sum, na.rm=T)
result <- with(activities, tapply(steps, date, sum, na.rm = T))
hist(result, col="red", main = "Histogram of Step per Day", xlab = "steps", breaks = 61)
mean(result, na.rm=T)
median(result, na.rm=T)
newResult <- with(activitiesFill, tapply(steps, date, sum, na.rm = T))
newResult <- with(activitiesFill, tapply(steps, date, sum, na.rm = T))
hist(newResult, col="red", main = "Histogram of Step per Day", xlab = "steps", breaks = 61)
newResult <- with(activitiesFill, tapply(steps, date, sum, na.rm = T))
hist(newResult, col="red", main = "Histogram of Step per Day", xlab = "steps", breaks = 61)
newResult <- with(activitiesFill, tapply(steps, date, sum))
hist(newResult, col="red", main = "Histogram of Step per Day", xlab = "steps", breaks = 61)
sum(is.na(activities$steps))
activitiesFill <- activities
for (i in 1:dim(activitiesFill)[1]) {
if (is.na(activitiesFill$steps[i])) {
activitiesFill[i] <- as.numeric(meanInterval[names(meanInterval) == activitiesFill$interval[i]])
}
}
View(activitiesFill)
View(activitiesFill)
sum(is.na(activities$steps))
activitiesFill <- activities
for (i in 1:dim(activitiesFill)[1]) {
if (is.na(activitiesFill$steps[i])) {
activitiesFill$steps[i] <- as.numeric(meanInterval[names(meanInterval) == activitiesFill$interval[i]])
}
}
newResult <- with(activitiesFill, tapply(steps, date, sum))
hist(newResult, col="red", main = "Histogram of Step per Day", xlab = "steps", breaks = 61)
mean(newResult$sum, na.rm=T)
median(newResult$sum, na.rm=T)
mean(newResult, na.rm=T)
median(newResult, na.rm=T)
w <- weekdays(data2$date)
w[w == "Sunday"] <- "weekend"
w[w != "weekend"] <- "weekday"
data2$Week <- as.factor(w)
w <- weekdays(activitiesFill$date)
w[w == "Sunday"] <- "weekend"
w[w != "weekend"] <- "weekday"
activitiesFill$Week <- as.factor(w)
activities$date <- as.Date(activities$date, format = "%Y-%m-%d")
activitiesFill <- activities
for (i in 1:dim(activitiesFill)[1]) {
if (is.na(activitiesFill$steps[i])) {
activitiesFill$steps[i] <- as.numeric(meanInterval[names(meanInterval) == activitiesFill$interval[i]])
}
}
w <- weekdays(activitiesFill$date)
w[w == "Sunday"] <- "weekend"
w[w != "weekend"] <- "weekday"
activitiesFill$Week <- as.factor(w)
activitiesFill$Week
w <- weekdays(activitiesFill$date)
w[w == "Sunday"] <- "Weekend"
w[w != "Sunday"] <- "Weekday"
activitiesFill$Week <- as.factor(w)
steps_int <- aggregate(steps ~ interval + Week, data = activitiesFill, mean)
xyplot(steps ~ interval | Week, type = "l", data = steps_int, layout = c(1,
2), xlab = "Interval", ylab = "Number of steps")
library(lattice)
xyplot(steps ~ interval | Week, type = "l", data = steps_int, layout = c(1,
2), xlab = "Interval", ylab = "Number of steps")
activitiesFill$Week <- weekdays(activitiesFill$date)
activitiesFill$Week [activitiesFill$Week  == "Sunday"] <- "Weekend"
activitiesFill$Week [activitiesFill$Week  != "Sunday"] <- "Weekday"
activitiesFill$Week <- as.factor(w)
activitiesFill$Week <- weekdays(activitiesFill$date)
activitiesFill$Week [activitiesFill$Week  == "Sunday"] <- "Weekend"
activitiesFill$Week [activitiesFill$Week  != "Weekend"] <- "Weekday"
activitiesFill$Week <- as.factor(w)
steps_int <- aggregate(steps ~ interval + Week, data = activitiesFill, mean)
library(lattice)
xyplot(steps ~ interval | Week, type = "l", data = steps_int, layout = c(1,
2), xlab = "Interval", ylab = "Number of steps")
activities <- read.csv("activity.csv")
activities$date <- as.Date(activities$date, format = "%Y-%m-%d")
activitiesFill <- activities
for (i in 1:dim(activitiesFill)[1]) {
if (is.na(activitiesFill$steps[i])) {
activitiesFill$steps[i] <- as.numeric(meanInterval[names(meanInterval) == activitiesFill$interval[i]])
}
}
activitiesFill$Week <- weekdays(activitiesFill$date)
activitiesFill$Week [activitiesFill$Week  == "Sunday"] <- "Weekend"
activitiesFill$Week [activitiesFill$Week  != "Weekend"] <- "Weekday"
activitiesFill$Week <- as.factor(w)
steps_int <- aggregate(steps ~ interval + Week, data = activitiesFill, mean)
library(lattice)
xyplot(steps ~ interval | Week, type = "l", data = steps_int, layout = c(1,
2), xlab = "Interval", ylab = "Number of steps")
w <- weekdays(activitiesFill$date)
w[w == "Sunday"] <- "weekend"
w[w != "weekend"] <- "weekday"
activitiesFill$Week <- as.factor(w)
steps_int <- aggregate(steps ~ interval + Week, data = activitiesFill, mean)
library(lattice)
xyplot(steps ~ interval | Week, type = "l", data = steps_int, layout = c(1,
2), xlab = "Interval", ylab = "Number of steps")
maxInterval <- as.numeric(names(meanInterval)[meanInterval == max(meanInterval)])
maxInterval
naCount <- sum(is.na(activities$steps))
naCount
mean <- mean(newResult, na.rm=T)
mean
median <- median(newResult, na.rm=T)
median
w <- weekdays(activitiesFill$date)
w[w == "Sunday"] <- "weekend"
w[w != "weekend"] <- "weekday"
activitiesFill$Week <- as.factor(w)
steps_int <- aggregate(steps ~ interval + Week, data = activitiesFill, mean)
library(lattice)
xyplot(steps ~ interval | Week, type = "l", data = steps_int, layout = c(1,
2), xlab = "Interval", ylab = "Number of steps")
w <- weekdays(activitiesFill$date)
w[w == "Sunday"] <- "weekend"
w[w != "weekend"] <- "weekday"
activitiesFill$Week <- as.factor(w)
steps_int <- aggregate(steps ~ interval + Week, data = activitiesFill, mean)
w <- weekdays(activitiesFill$date)
w[w == "Sunday"] <- "weekend"
w[w != "weekend"] <- "weekday"
activitiesFill$Week <- as.factor(w)
steps_int <- aggregate(steps ~ interval + Week, data = activitiesFill, mean)
library(lattice)
xyplot(steps ~ interval | Week, type = "l", data = steps_int, layout = c(1,
2), xlab = "Interval", ylab = "Number of steps")
steps_int <- aggregate(steps ~ interval + Week, data = activitiesFill, mean)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
xyplot(steps ~ interval | Week, type = "l", data = steps_int, layout = c(1,
2), xlab = "Interval", ylab = "Number of steps"
w <- weekdays(activitiesFill$date)
w[w == "Sunday"] <- "weekend"
w[w != "weekend"] <- "weekday"
activitiesFill$Week <- as.factor(w)
w <- weekdays(activitiesFill$date)
w[w == "Sunday"] <- "weekend"
w[w != "weekend"] <- "weekday"
activitiesFill$Week <- as.factor(w)
steps_int <- aggregate(steps ~ interval + Week, data = activitiesFill, mean)
aggregate(steps ~ interval + Week, data = activitiesFill, mean)
aggregate
activitiesFill
activitiesFill$steps
activitiesFill$Week
activitiesFill$interval
activitiesFill$steps
steps_int <- aggregate(steps ~ interval + Week, data = activitiesFill, FUN=mean)
steps_int <- aggregate(steps ~ interval + Week, data = data2, mean)
steps_int <- aggregate(steps ~ interval + Week, data = activities, mean)
steps_int <- aggregate(steps ~ interval + Week, data = activitiesFill, mean)
library(lattice)
Sys.setlocale("LC_TIME", "US")
data <- read.csv("activity.csv")
rm(temp)
data$date<-as.Date(data$date, format="%Y-%m-%d")
library(lattice)
Sys.setlocale("LC_TIME", "US")
data <- read.csv("activity.csv")
data$date<-as.Date(data$date, format="%Y-%m-%d")
Total<-with(data,tapply(steps,date,sum,na.rm=T))
hist(Total,main="Histogram of total number of steps taken per day",breaks=61)
abline(v=mean(as.numeric(Total)),col="red")
abline(v=median(as.numeric(Total)),col="blue",lty=2)
#create legend data
legend("topright", lty=c(1,2), col=c( "red", "blue"), legend=c("mean", "median"),box.lwd = 0,box.col = "transparent", bg="transparent")
#the average and the median is calculated.
mea<-mean(na.exclude(as.numeric(Total)))
med<-median(na.exclude(as.numeric(Total)))
options(scipen = 1, digits = 2)
#calculate the average distance in each time interval
MeInt<-tapply(data$steps,data$interval,mean,na.rm=T)
int<-as.numeric(names(MeInt))
#plot
plot(int,MeInt,type="l",xlab="Interval",ylab="Steps")
max<-as.numeric(names(MeInt)[MeInt==max(MeInt)])
#add a line where the maximum number of steps
abline(v=max,col="red")
legend("topright", lty=c(1), col=c( "red"), legend=c( "max"),box.lwd = 0,box.col = "transparent", bg="transparent")
QtNas<-sum(is.na(data$steps))
QtNas<-sum(is.na(data$steps))
data2<-data
for(i in 1:dim(data)[1]){
if(is.na(data2$steps[i])){
data2$steps[i]<-as.numeric(MeInt[names(MeInt)==data2$interval[i]])
}
}
Total2<-with(data2,tapply(steps,date,sum))
hist(Total2,main="Histogram of total number of steps taken per day (imputed)",breaks=61)
abline(v=mean(as.numeric(Total2)),col="red")
abline(v=median(as.numeric(Total2)),col="blue",lty=2)
#create legend data
legend("topright", lty=c(1,2), col=c( "red", "blue"), legend=c("mean", "median"),box.lwd = 0,box.col = "transparent", bg="transparent")
me2<-mean(as.numeric(Total2))
med2<-median(as.numeric(Total2))
w<-weekdays(data2$date)
w[w=="Sunday"]<-"weekend"
w[w!="weekend"]<-"weekday"
data2$Week<-as.factor(w)
steps_int <- aggregate(steps ~ interval + Week, data = data2, mean)
xyplot(steps~interval | Week, type = "l", data = steps_int, layout = c(1, 2),xlab = "Interval",ylab = "Number of steps")
